# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Settings {
  id: ID!
  title: String
  description: String
  copyrightText: String
  robots: String
  isPrivate: Boolean
  homePage: Page
  theme: Theme
}

input SettingsWhereUniqueInput {
  id: ID
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  copyrightText: StringFilter
  robots: StringFilter
  isPrivate: BooleanFilter
  homePage: PageWhereInput
  theme: ThemeWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SettingsOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  copyrightText: OrderDirection
  robots: OrderDirection
  isPrivate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SettingsUpdateInput {
  title: String
  description: String
  copyrightText: String
  robots: String
  isPrivate: Boolean
  homePage: PageRelateToOneForUpdateInput
  theme: ThemeRelateToOneForUpdateInput
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input ThemeRelateToOneForUpdateInput {
  create: ThemeCreateInput
  connect: ThemeWhereUniqueInput
  disconnect: Boolean
}

input SettingsUpdateArgs {
  where: SettingsWhereUniqueInput! = {id: 1}
  data: SettingsUpdateInput!
}

input SettingsCreateInput {
  title: String
  description: String
  copyrightText: String
  robots: String
  isPrivate: Boolean
  homePage: PageRelateToOneForCreateInput
  theme: ThemeRelateToOneForCreateInput
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

input ThemeRelateToOneForCreateInput {
  create: ThemeCreateInput
  connect: ThemeWhereUniqueInput
}

type Theme {
  id: ID!
  name: String
  colorPrimary: String
  colorPrimaryDark: String
  fontPrimary: String
  fontSecondary: String
}

input ThemeWhereUniqueInput {
  id: ID
}

input ThemeWhereInput {
  AND: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  NOT: [ThemeWhereInput!]
  id: IDFilter
  name: StringFilter
  colorPrimary: StringFilter
  colorPrimaryDark: StringFilter
  fontPrimary: StringFilter
  fontSecondary: StringFilter
}

input ThemeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  colorPrimary: OrderDirection
  colorPrimaryDark: OrderDirection
  fontPrimary: OrderDirection
  fontSecondary: OrderDirection
}

input ThemeUpdateInput {
  name: String
  colorPrimary: String
  colorPrimaryDark: String
  fontPrimary: String
  fontSecondary: String
}

input ThemeUpdateArgs {
  where: ThemeWhereUniqueInput!
  data: ThemeUpdateInput!
}

input ThemeCreateInput {
  name: String
  colorPrimary: String
  colorPrimaryDark: String
  fontPrimary: String
  fontSecondary: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  pages: PageManyRelationFilter
  isAdmin: BooleanFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  isAdmin: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  isAdmin: Boolean
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

type Page {
  id: ID!
  title: String
  slug: String
  description: String
  publishedAt: DateTime
  status: String
  author: User
  content: Page_content_Document
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
  author: UserWhereInput
  posts: PostManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  description: String
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForUpdateInput
  content: JSON
  posts: PostRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  description: String
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForCreateInput
  content: JSON
  posts: PostRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  description: String
  publishedAt: DateTime
  status: String
  author: User
  content: Post_content_Document
  images(where: PostImageWhereInput! = {}, orderBy: [PostImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostImageWhereUniqueInput): [PostImage!]
  imagesCount(where: PostImageWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
  author: UserWhereInput
  images: PostImageManyRelationFilter
}

input PostImageManyRelationFilter {
  every: PostImageWhereInput
  some: PostImageWhereInput
  none: PostImageWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForUpdateInput
  content: JSON
  images: PostImageRelateToManyForUpdateInput
}

input PostImageRelateToManyForUpdateInput {
  disconnect: [PostImageWhereUniqueInput!]
  set: [PostImageWhereUniqueInput!]
  create: [PostImageCreateInput!]
  connect: [PostImageWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForCreateInput
  content: JSON
  images: PostImageRelateToManyForCreateInput
}

input PostImageRelateToManyForCreateInput {
  create: [PostImageCreateInput!]
  connect: [PostImageWhereUniqueInput!]
}

type PostImage {
  id: ID!
  title: String
  description: String
  image: CloudinaryImage_File
  altText: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input PostImageWhereUniqueInput {
  id: ID
}

input PostImageWhereInput {
  AND: [PostImageWhereInput!]
  OR: [PostImageWhereInput!]
  NOT: [PostImageWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
  posts: PostManyRelationFilter
}

input PostImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  altText: OrderDirection
}

input PostImageUpdateInput {
  title: String
  description: String
  image: Upload
  altText: String
  posts: PostRelateToManyForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PostImageUpdateArgs {
  where: PostImageWhereUniqueInput!
  data: PostImageUpdateInput!
}

input PostImageCreateInput {
  title: String
  description: String
  image: Upload
  altText: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSettings(data: SettingsCreateInput!): Settings
  createManySettings(data: [SettingsCreateInput!]!): [Settings]
  updateSettings(where: SettingsWhereUniqueInput! = {id: 1}, data: SettingsUpdateInput!): Settings
  updateManySettings(data: [SettingsUpdateArgs!]!): [Settings]
  deleteSettings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  deleteManySettings(where: [SettingsWhereUniqueInput!]!): [Settings]
  createTheme(data: ThemeCreateInput!): Theme
  createThemes(data: [ThemeCreateInput!]!): [Theme]
  updateTheme(where: ThemeWhereUniqueInput!, data: ThemeUpdateInput!): Theme
  updateThemes(data: [ThemeUpdateArgs!]!): [Theme]
  deleteTheme(where: ThemeWhereUniqueInput!): Theme
  deleteThemes(where: [ThemeWhereUniqueInput!]!): [Theme]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPostImage(data: PostImageCreateInput!): PostImage
  createPostImages(data: [PostImageCreateInput!]!): [PostImage]
  updatePostImage(where: PostImageWhereUniqueInput!, data: PostImageUpdateInput!): PostImage
  updatePostImages(data: [PostImageUpdateArgs!]!): [PostImage]
  deletePostImage(where: PostImageWhereUniqueInput!): PostImage
  deletePostImages(where: [PostImageWhereUniqueInput!]!): [PostImage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  settings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  manySettings(where: SettingsWhereInput! = {id: {equals: 1}}, orderBy: [SettingsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SettingsWhereUniqueInput): [Settings!]
  manySettingsCount(where: SettingsWhereInput! = {id: {equals: 1}}): Int
  theme(where: ThemeWhereUniqueInput!): Theme
  themes(where: ThemeWhereInput! = {}, orderBy: [ThemeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ThemeWhereUniqueInput): [Theme!]
  themesCount(where: ThemeWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  postImage(where: PostImageWhereUniqueInput!): PostImage
  postImages(where: PostImageWhereInput! = {}, orderBy: [PostImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostImageWhereUniqueInput): [PostImage!]
  postImagesCount(where: PostImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
